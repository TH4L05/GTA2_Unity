//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Script/Input/GameControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace ProjectGTA2_Unity.Input
{
    public partial class @GameControls: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @GameControls()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""GameControls"",
    ""maps"": [
        {
            ""name"": ""Movement"",
            ""id"": ""0e46f0db-265d-4069-ad74-f7822ea436cf"",
            ""actions"": [
                {
                    ""name"": ""MovementBase"",
                    ""type"": ""PassThrough"",
                    ""id"": ""a562751e-9f14-4fe4-8a58-1d46f50d2e6d"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""7071ddc7-ed02-46b4-a529-9ca07069d72b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""2eb4d5b6-3c1b-4609-b06d-9b3735c004c3"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovementBase"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""b3465e86-0bae-4eb3-8954-68efdbee994c"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Default"",
                    ""action"": ""MovementBase"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""7c30f3f5-a549-40dd-9f63-ebdd588bbdb7"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Default"",
                    ""action"": ""MovementBase"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""d316959b-522f-49c0-b998-8c3d6d9d14f3"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Default"",
                    ""action"": ""MovementBase"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""0b3b4536-ca3c-452f-9030-199783abc3ce"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Default"",
                    ""action"": ""MovementBase"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""1ab1236f-4b16-4e1c-9789-fcefa43a67d1"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Default"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""InterAction"",
            ""id"": ""fe025fed-9ec2-4abc-aa05-4d06a569533f"",
            ""actions"": [
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""44b371b4-da04-4c78-a35e-cebdbe03b049"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Shoot"",
                    ""type"": ""Button"",
                    ""id"": ""034e7320-e844-4d97-a8dc-bd74861715d7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""WeaponNext"",
                    ""type"": ""Button"",
                    ""id"": ""1edc6314-25c3-4c5b-8a2f-1d2075ae6cea"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""WeaponPrevious"",
                    ""type"": ""Button"",
                    ""id"": ""0a06506f-0c30-497d-950e-1b62c5fbf69a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Fun"",
                    ""type"": ""Button"",
                    ""id"": ""f162f065-487a-4af8-a392-6bdb257301f5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""54610704-e1c9-4444-bdb2-6d5624beb3bc"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Default"",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f002fea2-c4df-447a-b9ee-e4fe5efddc70"",
                    ""path"": ""<Keyboard>/leftCtrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Default"",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e4c597e6-366f-422c-a394-2a2d214a1e88"",
                    ""path"": ""<Keyboard>/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Default"",
                    ""action"": ""WeaponNext"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ea46598b-86ab-4f5f-bbfc-dc5d40dd1bc7"",
                    ""path"": ""<Keyboard>/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Default"",
                    ""action"": ""WeaponPrevious"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9b845c58-2d4d-445a-a6ff-710c8dba1240"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Fun"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Default"",
            ""bindingGroup"": ""Default"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
            // Movement
            m_Movement = asset.FindActionMap("Movement", throwIfNotFound: true);
            m_Movement_MovementBase = m_Movement.FindAction("MovementBase", throwIfNotFound: true);
            m_Movement_Jump = m_Movement.FindAction("Jump", throwIfNotFound: true);
            // InterAction
            m_InterAction = asset.FindActionMap("InterAction", throwIfNotFound: true);
            m_InterAction_Interact = m_InterAction.FindAction("Interact", throwIfNotFound: true);
            m_InterAction_Shoot = m_InterAction.FindAction("Shoot", throwIfNotFound: true);
            m_InterAction_WeaponNext = m_InterAction.FindAction("WeaponNext", throwIfNotFound: true);
            m_InterAction_WeaponPrevious = m_InterAction.FindAction("WeaponPrevious", throwIfNotFound: true);
            m_InterAction_Fun = m_InterAction.FindAction("Fun", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Movement
        private readonly InputActionMap m_Movement;
        private List<IMovementActions> m_MovementActionsCallbackInterfaces = new List<IMovementActions>();
        private readonly InputAction m_Movement_MovementBase;
        private readonly InputAction m_Movement_Jump;
        public struct MovementActions
        {
            private @GameControls m_Wrapper;
            public MovementActions(@GameControls wrapper) { m_Wrapper = wrapper; }
            public InputAction @MovementBase => m_Wrapper.m_Movement_MovementBase;
            public InputAction @Jump => m_Wrapper.m_Movement_Jump;
            public InputActionMap Get() { return m_Wrapper.m_Movement; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(MovementActions set) { return set.Get(); }
            public void AddCallbacks(IMovementActions instance)
            {
                if (instance == null || m_Wrapper.m_MovementActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_MovementActionsCallbackInterfaces.Add(instance);
                @MovementBase.started += instance.OnMovementBase;
                @MovementBase.performed += instance.OnMovementBase;
                @MovementBase.canceled += instance.OnMovementBase;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
            }

            private void UnregisterCallbacks(IMovementActions instance)
            {
                @MovementBase.started -= instance.OnMovementBase;
                @MovementBase.performed -= instance.OnMovementBase;
                @MovementBase.canceled -= instance.OnMovementBase;
                @Jump.started -= instance.OnJump;
                @Jump.performed -= instance.OnJump;
                @Jump.canceled -= instance.OnJump;
            }

            public void RemoveCallbacks(IMovementActions instance)
            {
                if (m_Wrapper.m_MovementActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IMovementActions instance)
            {
                foreach (var item in m_Wrapper.m_MovementActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_MovementActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public MovementActions @Movement => new MovementActions(this);

        // InterAction
        private readonly InputActionMap m_InterAction;
        private List<IInterActionActions> m_InterActionActionsCallbackInterfaces = new List<IInterActionActions>();
        private readonly InputAction m_InterAction_Interact;
        private readonly InputAction m_InterAction_Shoot;
        private readonly InputAction m_InterAction_WeaponNext;
        private readonly InputAction m_InterAction_WeaponPrevious;
        private readonly InputAction m_InterAction_Fun;
        public struct InterActionActions
        {
            private @GameControls m_Wrapper;
            public InterActionActions(@GameControls wrapper) { m_Wrapper = wrapper; }
            public InputAction @Interact => m_Wrapper.m_InterAction_Interact;
            public InputAction @Shoot => m_Wrapper.m_InterAction_Shoot;
            public InputAction @WeaponNext => m_Wrapper.m_InterAction_WeaponNext;
            public InputAction @WeaponPrevious => m_Wrapper.m_InterAction_WeaponPrevious;
            public InputAction @Fun => m_Wrapper.m_InterAction_Fun;
            public InputActionMap Get() { return m_Wrapper.m_InterAction; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(InterActionActions set) { return set.Get(); }
            public void AddCallbacks(IInterActionActions instance)
            {
                if (instance == null || m_Wrapper.m_InterActionActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_InterActionActionsCallbackInterfaces.Add(instance);
                @Interact.started += instance.OnInteract;
                @Interact.performed += instance.OnInteract;
                @Interact.canceled += instance.OnInteract;
                @Shoot.started += instance.OnShoot;
                @Shoot.performed += instance.OnShoot;
                @Shoot.canceled += instance.OnShoot;
                @WeaponNext.started += instance.OnWeaponNext;
                @WeaponNext.performed += instance.OnWeaponNext;
                @WeaponNext.canceled += instance.OnWeaponNext;
                @WeaponPrevious.started += instance.OnWeaponPrevious;
                @WeaponPrevious.performed += instance.OnWeaponPrevious;
                @WeaponPrevious.canceled += instance.OnWeaponPrevious;
                @Fun.started += instance.OnFun;
                @Fun.performed += instance.OnFun;
                @Fun.canceled += instance.OnFun;
            }

            private void UnregisterCallbacks(IInterActionActions instance)
            {
                @Interact.started -= instance.OnInteract;
                @Interact.performed -= instance.OnInteract;
                @Interact.canceled -= instance.OnInteract;
                @Shoot.started -= instance.OnShoot;
                @Shoot.performed -= instance.OnShoot;
                @Shoot.canceled -= instance.OnShoot;
                @WeaponNext.started -= instance.OnWeaponNext;
                @WeaponNext.performed -= instance.OnWeaponNext;
                @WeaponNext.canceled -= instance.OnWeaponNext;
                @WeaponPrevious.started -= instance.OnWeaponPrevious;
                @WeaponPrevious.performed -= instance.OnWeaponPrevious;
                @WeaponPrevious.canceled -= instance.OnWeaponPrevious;
                @Fun.started -= instance.OnFun;
                @Fun.performed -= instance.OnFun;
                @Fun.canceled -= instance.OnFun;
            }

            public void RemoveCallbacks(IInterActionActions instance)
            {
                if (m_Wrapper.m_InterActionActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IInterActionActions instance)
            {
                foreach (var item in m_Wrapper.m_InterActionActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_InterActionActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public InterActionActions @InterAction => new InterActionActions(this);
        private int m_DefaultSchemeIndex = -1;
        public InputControlScheme DefaultScheme
        {
            get
            {
                if (m_DefaultSchemeIndex == -1) m_DefaultSchemeIndex = asset.FindControlSchemeIndex("Default");
                return asset.controlSchemes[m_DefaultSchemeIndex];
            }
        }
        public interface IMovementActions
        {
            void OnMovementBase(InputAction.CallbackContext context);
            void OnJump(InputAction.CallbackContext context);
        }
        public interface IInterActionActions
        {
            void OnInteract(InputAction.CallbackContext context);
            void OnShoot(InputAction.CallbackContext context);
            void OnWeaponNext(InputAction.CallbackContext context);
            void OnWeaponPrevious(InputAction.CallbackContext context);
            void OnFun(InputAction.CallbackContext context);
        }
    }
}
